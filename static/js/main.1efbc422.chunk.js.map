{"version":3,"sources":["constants.js","Letter.js","Game.js","App.js","index.js"],"names":["UNCHECKED","ABSENT","WRONG_PLACE","CORRECT","Letter","children","status","className","cx","ANSWER","Game","useState","currentLetters","setCurrentLetters","guessedWords","setGuessedWords","isSolved","setIsSolved","deleteLetter","useCallback","slice","setLetterStatuses","map","currentLetter","index","letter","includes","isCorrectAnswer","every","submitWord","length","useEffect","handleKeyDown","e","key","String","fromCharCode","keyCode","match","toLowerCase","document","addEventListener","removeEventListener","guessedWord","guessedLetter","App","rootElement","getElementById","ReactDOM","render"],"mappings":"gRAAaA,EAAY,YACZC,EAAS,SACTC,EAAc,cACdC,EAAU,U,OCgBRC,EAfA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC1B,OACE,qBACEC,UAAWC,IAAG,SAAU,CACtB,oBAAqBF,IAAWN,EAChC,iBAAkBM,IAAWL,EAC7B,qBAAsBK,IAAWJ,EACjC,kBAAmBI,IAAWH,IALlC,SAQGE,KCTDI,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,KA0HrBC,EAxHF,WASX,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAkBA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAeC,uBAAY,WAC/BN,GAAkB,SAACD,GAAD,OAAoBA,EAAeQ,MAAM,GAAI,QAC9D,IAEGC,EAAoBF,uBACxB,kBACEP,EAAeU,KAAI,SAACC,EAAeC,GACjC,OAAID,EAAcE,SAAWhB,EAAOe,IAClCD,EAAcjB,OAASH,EAChBoB,GACEd,EAAOiB,SAASH,EAAcE,SACvCF,EAAcjB,OAASJ,EAChBqB,IAEPA,EAAcjB,OAASL,EAChBsB,QAGb,CAACX,IAGGe,EAAkBR,uBACtB,kBACEP,EAAegB,OACb,SAACL,EAAeC,GAAhB,OAA0BD,EAAcE,SAAWhB,EAAOe,QAE9D,CAACZ,IAGGiB,EAAaV,uBAAY,WACC,IAA1BP,EAAekB,SAGnBT,IACIM,KACFV,GAAY,GAEdF,GAAgB,SAACD,GAAD,4BAAsBA,GAAtB,CAAoCF,OACpDC,EAAkB,OACjB,CAACD,EAAgBS,EAAmBM,IA4BvC,OA1BAI,qBAAU,WACR,IAAMC,EAAgB,SAACC,GACjBjB,IAEiB,cAAViB,EAAEC,IACXhB,IACmB,UAAVe,EAAEC,IACXL,IAEAM,OAAOC,aAAaH,EAAEI,SAASC,MAAM,mBACrC1B,EAAekB,OAAS,GAExBjB,GAAkB,SAACD,GAAD,4BACbA,GADa,CAEhB,CAAEa,OAAQQ,EAAEC,IAAIK,cAAejC,OAAQN,UAO7C,OAFAwC,SAASC,iBAAiB,UAAWT,GAE9B,WACLQ,SAASE,oBAAoB,UAAWV,MAEzC,CAACd,EAAcW,EAAYb,EAAUJ,EAAekB,SAGrD,sBAAKvB,UAAU,OAAf,UACGO,EAAaQ,KAAI,SAACqB,GAAD,OAChB,8BACGA,EAAYrB,KAAI,SAACsB,EAAepB,GAAhB,OACf,cAAC,EAAD,CAAoBlB,OAAQsC,EAActC,OAA1C,SACGsC,EAAcnB,QADJD,WAMnB,8BACGZ,EAAeU,KAAI,SAACC,EAAeC,GAAhB,OAClB,cAAC,EAAD,CAAoBlB,OAAQiB,EAAcjB,OAA1C,SACGiB,EAAcE,QADJD,QAKhBR,GAAY,wEC1GJ6B,MAbf,WACE,OACE,sBAAKtC,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,YAAd,oBACA,mBAAGA,UAAU,eAAb,+CAEF,wFACA,cAAC,EAAD,QCLAuC,EAAcN,SAASO,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFH,K","file":"static/js/main.1efbc422.chunk.js","sourcesContent":["export const UNCHECKED = \"UNCHECKED\";\nexport const ABSENT = \"ABSENT\";\nexport const WRONG_PLACE = \"WRONG_PLACE\";\nexport const CORRECT = \"CORRECT\";\n\nexport const STATUSES = {\n  UNCHECKED: UNCHECKED,\n  ABSENT: ABSENT,\n  WRONG_PLACE: WRONG_PLACE,\n  CORRECT: CORRECT\n};\n","import \"./Letter.scss\";\nimport cx from \"classnames\";\nimport { ABSENT, WRONG_PLACE, CORRECT, UNCHECKED } from \"./constants\";\n\nconst Letter = ({ children, status }) => {\n  return (\n    <div\n      className={cx(\"Letter\", {\n        \"Letter--unchecked\": status === UNCHECKED,\n        \"Letter--absent\": status === ABSENT,\n        \"Letter--wrongPlace\": status === WRONG_PLACE,\n        \"Letter--correct\": status === CORRECT\n      })}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Letter;\n","import \"./Game.scss\";\nimport Letter from \"./Letter\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { UNCHECKED, ABSENT, WRONG_PLACE, CORRECT } from \"./constants\";\n\nconst ANSWER = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n\nconst Game = () => {\n  // currentLetters data structure looks like:\n  // [\n  //   { letter: \"s\", status: ABSENT },\n  //   { letter: \"a\", status: ABSENT },\n  //   { letter: \"m\", status: ABSENT },\n  //   { letter: \"p\", status: ABSENT },\n  //   { letter: \"l\", status: WRONG_PLACE }\n  // ]\n  const [currentLetters, setCurrentLetters] = useState([]);\n  // guessedWords data structure looks like:\n  // [\n  //   [\n  //     { letter: \"s\", status: ABSENT },\n  //     { letter: \"a\", status: ABSENT },\n  //     { letter: \"m\", status: ABSENT },\n  //     { letter: \"p\", status: ABSENT },\n  //     { letter: \"l\", status: WRONG_PLACE }\n  //   ],\n  //   [\n  //     { letter: \"h\", status: CORRECT },\n  //     { letter: \"e\", status: CORRECT },\n  //     { letter: \"l\", status: CORRECT },\n  //     { letter: \"l\", status: CORRECT },\n  //     { letter: \"o\", status: CORRECT }\n  //   ]\n  // ]\n  const [guessedWords, setGuessedWords] = useState([]);\n  const [isSolved, setIsSolved] = useState(false);\n\n  const deleteLetter = useCallback(() => {\n    setCurrentLetters((currentLetters) => currentLetters.slice(0, -1));\n  }, []);\n\n  const setLetterStatuses = useCallback(\n    () =>\n      currentLetters.map((currentLetter, index) => {\n        if (currentLetter.letter === ANSWER[index]) {\n          currentLetter.status = CORRECT;\n          return currentLetter;\n        } else if (ANSWER.includes(currentLetter.letter)) {\n          currentLetter.status = WRONG_PLACE;\n          return currentLetter;\n        } else {\n          currentLetter.status = ABSENT;\n          return currentLetter;\n        }\n      }),\n    [currentLetters]\n  );\n\n  const isCorrectAnswer = useCallback(\n    () =>\n      currentLetters.every(\n        (currentLetter, index) => currentLetter.letter === ANSWER[index]\n      ),\n    [currentLetters]\n  );\n\n  const submitWord = useCallback(() => {\n    if (currentLetters.length !== 5) {\n      return;\n    }\n    setLetterStatuses();\n    if (isCorrectAnswer()) {\n      setIsSolved(true);\n    }\n    setGuessedWords((guessedWords) => [...guessedWords, currentLetters]);\n    setCurrentLetters([]);\n  }, [currentLetters, setLetterStatuses, isCorrectAnswer]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (isSolved) {\n        return;\n      } else if (e.key === \"Backspace\") {\n        deleteLetter();\n      } else if (e.key === \"Enter\") {\n        submitWord();\n      } else if (\n        String.fromCharCode(e.keyCode).match(/([A-Z]|[a-z])/g) &&\n        currentLetters.length < 5\n      ) {\n        setCurrentLetters((currentLetters) => [\n          ...currentLetters,\n          { letter: e.key.toLowerCase(), status: UNCHECKED }\n        ]);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return function cleanup() {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [deleteLetter, submitWord, isSolved, currentLetters.length]);\n\n  return (\n    <div className=\"Game\">\n      {guessedWords.map((guessedWord) => (\n        <div>\n          {guessedWord.map((guessedLetter, index) => (\n            <Letter key={index} status={guessedLetter.status}>\n              {guessedLetter.letter}\n            </Letter>\n          ))}\n        </div>\n      ))}\n      <div>\n        {currentLetters.map((currentLetter, index) => (\n          <Letter key={index} status={currentLetter.status}>\n            {currentLetter.letter}\n          </Letter>\n        ))}\n      </div>\n      {isSolved && <p>Congratulations! You've guessed it!</p>}\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./App.scss\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 className=\"App-title\">Warble</h1>\n        <p className=\"App-subtitle\">A Wordle remake, just for fun!</p>\n      </div>\n      <p>Type letters on your keyboard and press enter to sumbit</p>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.scss\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}